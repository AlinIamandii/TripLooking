// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripLooking.Database.Models;

namespace TripLooking.Database.Migrations
{
    [DbContext(typeof(TripLookingContext))]
    [Migration("20200713181930_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TripLooking.Database.Models.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUniversity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdUniversity");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("IdTrip")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("IdImage")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("TripLooking.Database.Models.PlaceComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("PlaceComment");
                });

            modelBuilder.Entity("TripLooking.Database.Models.RoleAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdAuthorization")
                        .HasColumnType("int");

                    b.Property<int>("IdUserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthorization");

                    b.ToTable("RoleAuthorization");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IdFaculty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("IdFaculty");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Age")
                        .HasColumnType("numeric(2, 0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("IdSpecialization")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("PhoneMobile")
                        .HasColumnType("numeric(10, 0)");

                    b.Property<decimal>("Year")
                        .HasColumnType("numeric(4, 0)");

                    b.HasKey("Id");

                    b.HasIndex("IdSpecialization");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Capacity")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("TripLooking.Database.Models.TripComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("IdTrip")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.HasIndex("IdUser");

                    b.ToTable("TripComment");
                });

            modelBuilder.Entity("TripLooking.Database.Models.TripPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPlace")
                        .HasColumnType("int");

                    b.Property<int>("IdTrip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPlace");

                    b.HasIndex("IdTrip");

                    b.ToTable("TripPlace");
                });

            modelBuilder.Entity("TripLooking.Database.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.ToTable("University");
                });

            modelBuilder.Entity("TripLooking.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("IdStudent")
                        .HasColumnType("int");

                    b.Property<int>("IdUserType")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdUserType");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TripLooking.Database.Models.UserPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTripPlace")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTripPlace");

                    b.HasIndex("IdUser");

                    b.ToTable("UserPlace");
                });

            modelBuilder.Entity("TripLooking.Database.Models.UserTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTrip")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.HasIndex("IdUser");

                    b.ToTable("UserTrip");
                });

            modelBuilder.Entity("TripLooking.Database.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("TripLooking.Database.Models.Faculty", b =>
                {
                    b.HasOne("TripLooking.Database.Models.University", "IdUniversityNavigation")
                        .WithMany("Faculty")
                        .HasForeignKey("IdUniversity")
                        .HasConstraintName("FK_Faculty_University")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.Notification", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Trip", "IdTripNavigation")
                        .WithMany("Notification")
                        .HasForeignKey("IdTrip")
                        .HasConstraintName("FK_Notification_Trip")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.Place", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Image", "IdImageNavigation")
                        .WithMany("Place")
                        .HasForeignKey("IdImage")
                        .HasConstraintName("FK_Place_Image");
                });

            modelBuilder.Entity("TripLooking.Database.Models.PlaceComment", b =>
                {
                    b.HasOne("TripLooking.Database.Models.User", "IdUserNavigation")
                        .WithMany("PlaceComment")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_PlaceComment_User")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.RoleAuthorization", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Authorization", "IdAuthorizationNavigation")
                        .WithMany("RoleAuthorization")
                        .HasForeignKey("IdAuthorization")
                        .HasConstraintName("FK_RoleAuthorization_Authorization")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.Specialization", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Faculty", "IdFacultyNavigation")
                        .WithMany("Specialization")
                        .HasForeignKey("IdFaculty")
                        .HasConstraintName("FK_Specialization_Faculty")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.Student", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Specialization", "IdSpecializationNavigation")
                        .WithMany("Student")
                        .HasForeignKey("IdSpecialization")
                        .HasConstraintName("FK_Student_Specialization")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.TripComment", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Trip", "IdTripNavigation")
                        .WithMany("TripComment")
                        .HasForeignKey("IdTrip")
                        .HasConstraintName("FK_TripComment_Trip")
                        .IsRequired();

                    b.HasOne("TripLooking.Database.Models.User", "IdUserNavigation")
                        .WithMany("TripComment")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_TripComment_User")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.TripPlace", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Place", "IdPlaceNavigation")
                        .WithMany("TripPlace")
                        .HasForeignKey("IdPlace")
                        .HasConstraintName("FK_TripPlace_Place")
                        .IsRequired();

                    b.HasOne("TripLooking.Database.Models.Trip", "IdTripNavigation")
                        .WithMany("TripPlace")
                        .HasForeignKey("IdTrip")
                        .HasConstraintName("FK_TripPlace_Trip1")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.User", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Student", "IdStudentNavigation")
                        .WithMany("User")
                        .HasForeignKey("IdStudent")
                        .HasConstraintName("FK_User_Student");

                    b.HasOne("TripLooking.Database.Models.UserType", "IdUserTypeNavigation")
                        .WithMany("User")
                        .HasForeignKey("IdUserType")
                        .HasConstraintName("FK_User_UserType")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.UserPlace", b =>
                {
                    b.HasOne("TripLooking.Database.Models.TripPlace", "IdTripPlaceNavigation")
                        .WithMany("UserPlace")
                        .HasForeignKey("IdTripPlace")
                        .HasConstraintName("FK_UserPlace_TripPlace")
                        .IsRequired();

                    b.HasOne("TripLooking.Database.Models.User", "IdUserNavigation")
                        .WithMany("UserPlace")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_UserPlace_User")
                        .IsRequired();
                });

            modelBuilder.Entity("TripLooking.Database.Models.UserTrip", b =>
                {
                    b.HasOne("TripLooking.Database.Models.Trip", "IdTripNavigation")
                        .WithMany("UserTrip")
                        .HasForeignKey("IdTrip")
                        .HasConstraintName("FK_UserTrip_Trip1")
                        .IsRequired();

                    b.HasOne("TripLooking.Database.Models.User", "IdUserNavigation")
                        .WithMany("UserTrip")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_UserTrip_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
